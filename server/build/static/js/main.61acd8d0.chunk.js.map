{"version":3,"sources":["img/ford-explorer-vector.png","components/filters/filters.component.js","components/owners/owners.component.js","config.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Filters","props","useState","filters","setFilters","setSelectedFilter","useEffect","axios","get","then","response","data","generateRequestUrl","filter","query","keys","Object","forEach","key","index","value","constructor","Array","join","length","encodeURI","Card","Group","map","onClick","selectedFilter","requestUrl","onApplyFilter","applyFilter","raised","fluid","id","Content","Header","start_year","end_year","Description","gender","countries","country","Label","circular","Divider","vertical","hidden","colors","color","Owners","owners","setOwners","isEmpty","setIsEmpty","result","owner","Image","floated","size","src","fordImage","className","first_name","last_name","Meta","car_model","car_model_year","empty","job_title","email","bio","config","baseUrl","process","environment","App","setState","showFilters","filterRequestUrl","state","Container","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.61acd8d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ford-explorer-vector.bb371f4b.png\";","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Card, Label, Divider } from 'semantic-ui-react';\r\nimport './filters.component.css';\r\n\r\nconst Filters = (props) => {\r\n\r\n  const [filters, setFilters] = useState([]);\r\n  const [selectedFilter, setSelectedFilter] = useState()\r\n\r\n  useEffect(() => {\r\n    let url = 'ven10.co/assessment/filter.json'\r\n    var cors_api_host = 'cors-anywhere.herokuapp.com';\r\n    var cors_api_url = 'https://' + cors_api_host + '/' + url;\r\n    axios.get(cors_api_url)\r\n      .then(response => {\r\n        const filters = response.data;\r\n        setFilters(filters);\r\n      })\r\n  }, []);\r\n\r\n  const applyFilter = (index) => {\r\n    const selectedFilter = filters[index]\r\n    setSelectedFilter(selectedFilter)\r\n\r\n    let requestUrl = generateRequestUrl(selectedFilter);\r\n\r\n    props.onApplyFilter(requestUrl)\r\n\r\n   \r\n  }\r\n\r\n  const generateRequestUrl = (filter) => {\r\n\r\n    let baseUrl = \"http://localhost:5000/api/owners\"\r\n    let query = \"?\";\r\n\r\n    let keys = Object.keys(filter);\r\n    \r\n    keys.forEach((key, index) => {\r\n      if (key !== 'id') {\r\n        let value = filter[key];\r\n\r\n        if (value) {\r\n          if (value.constructor === Array) {\r\n           query += `${key}=${value.join(',')}`;\r\n          } else {\r\n            query += `${key}=${value}`;\r\n          }\r\n        }\r\n        \r\n        if (index < keys.length - 1) {\r\n          query += '&';\r\n        }\r\n      }\r\n     \r\n    });\r\n\r\n    return baseUrl + encodeURI(query);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Filters</h2>\r\n      <Card.Group>\r\n        {filters.map((filter, index) => (\r\n          <Card onClick = { () => applyFilter(index)} raised fluid key={filter.id}>\r\n            <Card.Content>\r\n              <Card.Header>\r\n                {filter.start_year} - {filter.end_year}\r\n              </Card.Header>\r\n              <Card.Description>\r\n                {filter.gender ? filter.gender : \"No Gender\"}\r\n              </Card.Description>\r\n              {filter.countries.map((country, index) => ( country ?\r\n                <span key={index}>\r\n                  <Label circular>{country}\r\n                  </Label>\r\n                  <Divider vertical hidden/>\r\n                </span> \r\n                : \r\n                <span key={index}>\r\n                  <Label>No Country\r\n                  </Label>\r\n                </span>\r\n              ))}\r\n              <Divider hidden />\r\n              <div>\r\n              {filter.colors.map(color => (\r\n                <Label circular key={color}></Label>\r\n              ))}\r\n              </div>\r\n            </Card.Content>\r\n          </Card>\r\n        ))}\r\n      </Card.Group>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Card, Label, Image } from 'semantic-ui-react';\r\nimport fordImage from '../../img/ford-explorer-vector.png'\r\nimport './owners.component.css'\r\n\r\nconst Owners = (props) => {\r\n\tconst [owners, setOwners] = useState([]);\r\n\tconst [isEmpty, setIsEmpty] = useState(true);\r\n\r\n\tconst fetchOwners = () => {\r\n\t\taxios.get(props.requestUrl)\r\n\t\t.then(response => {\r\n\t\t\tconst owners = response.data.data.result;\r\n\t\t\tsetOwners(owners)\r\n\t\t\tconst isEmpty = owners.length === 0;\r\n\t\t\tsetIsEmpty(isEmpty);\r\n\t\t})\r\n\t}\r\n\r\n\tuseEffect(fetchOwners, []);\t\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h2>Owners</h2>\r\n\t\t\t{isEmpty ? <h2>No Results</h2>\r\n\t\t\t\t:\r\n\t\t\t<Card.Group>\r\n\t\t\t\t{owners.map((owner) => ( \r\n\t\t\t\t\t<Card raised fluid key={owner.id}>\r\n\t\t\t\t\t\t<Card.Content>\r\n\t\t\t\t\t\t\t<Image\r\n\t\t\t\t\t\t\t\t floated=\"left\"\r\n\t\t\t\t\t\t\t\t size=\"medium\"\r\n\t\t\t\t\t\t\t\t src= {fordImage}\r\n\t\t\t\t\t\t\t />\r\n\t\t\t\t\t\t\t<Card.Header className=\"align-left\">\r\n\t\t\t\t\t\t\t\t{owner.first_name} {owner.last_name}\r\n\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t<Card.Content className=\"align-left\">\r\n\t\t\t\t\t\t\t\t<Card.Meta>\r\n                  Brand     |    Year     |     Color\r\n\t\t\t\t\t\t\t\t</Card.Meta>\r\n\t\t\t\t\t\t\t\t<Card.Header>\r\n\t\t\t\t\t\t\t\t  {owner.car_model}  |  {owner.car_model_year}  | <Label circular empty color={owner.color}></Label>\r\n\t\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t</Card.Content>\r\n\t\t\t\t\t\t\t<Card.Content className=\"align-left\">\r\n\t\t\t\t\t\t\t\t<Card.Meta>\r\n                  Country     |    Gender     |     Job\r\n\t\t\t\t\t\t\t\t</Card.Meta>\r\n\t\t\t\t\t\t\t\t<Card.Header>\r\n\t\t\t\t\t\t\t\t  {owner.country}  |  {owner.gender}  | {owner.job_title}\r\n\t\t\t\t\t\t\t\t</Card.Header>\r\n\t\t\t\t\t\t\t</Card.Content>\r\n\t\t\t\t      <Card.Content className=\"align-left\">Email: {owner.email}</Card.Content>\r\n\t\t\t\t\t\t\t<Card.Content className=\"align-left\">Bio: {owner.bio}</Card.Content>\r\n\t\t\t\t\t\t</Card.Content>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t))}\r\n\t\t\t</Card.Group>\r\n      }\r\n\t\t</div>\r\n\t);\r\n} \r\nexport default Owners;","const config = {\r\n\tbaseUrl: process.env.REACT_APP_BASE_URL,\r\n\tenvironment: process.env.NODE_ENV\r\n}\r\n\r\nexport default config;","import React, { Component } from 'react';\nimport './App.css';\nimport { Container } from 'semantic-ui-react';\nimport Filters from './components/filters/filters.component';\nimport Owners from './components/owners/owners.component'\nimport config from './config';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      showFilters: true,\n      filterRequestUrl: \"\"\n    }\n  }\n\n  applyFilter = (requestUrl) => {\n    this.setState({\n      showFilters: false,\n      filterRequestUrl:requestUrl\n    });\n  }\n\n  render() {\n    return (\n      <Container className=\"App\">\n        <div>{config.baseUrl}</div>\n        <div>\n        <button onClick={()=>{\n          this.setState({\n            showFilters:false\n          });\n        }}>Show Owners</button>\n\n        <button onClick={()=>{\n          this.setState({\n            showFilters:true\n          });\n        }}>Show Filters</button>\n        </div>\n        {this.state.showFilters? <Filters onApplyFilter={this.applyFilter} /> : <Owners requestUrl={this.state.filterRequestUrl} />}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}